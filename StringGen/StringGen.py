
from dyrogram import devil as app
import asyncio
from asyncio.exceptions import TimeoutError

from pyrogram import Client, filters
from pyrogram.errors import (
    PhoneCodeExpired,
    PhoneCodeInvalid,
    PhoneNumberInvalid,
    SessionPasswordNeeded,
)



@app.on_message(filters.command("genstr") & filters.private)
async def genstr(_, message):
    chat = message.chat
    while True:
        number = await app.ask(
            chat.id, "S·¥á…¥·¥Ö  è·¥è·¥ú Ä ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä …™…¥ …™…¥·¥õ·¥á Ä…¥·¥Ä·¥õ…™·¥è…¥·¥Ä ü “ì·¥è Ä·¥ç·¥Ä·¥õ."
        )
        if not number.text:
            continue
        phone = number.text.strip()
        confirm = await app.ask(
            chat.id, f'`Is "{phone}" ·¥Ñ·¥è Ä Ä·¥á·¥Ñ·¥õ ?` \n\nS·¥á…¥·¥Ö : `y`\nS·¥á…¥·¥Ö : `n`'
        )
        if "y" in confirm.text.lower():
            break
    try:
        temp_client = Client(
            ":memory:", api_id=6, api_hash="eb06d4abfb49dc3eeb1aeb98ae0f581e"
        )
    except Exception as e:
        await app.send_message(chat.id, f"**E Ä Ä·¥è Ä :** `{str(e)}`")
        return
    try:
        await temp_client.connect()
    except ConnectionError:
        await temp_client.disconnect()
        await temp_client.connect()
    try:
        code = await temp_client.send_code(phone)
        await asyncio.sleep(2)
    except PhoneNumberInvalid:
        await message.reply_text("P ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä …™s …™…¥·¥†·¥Ä ü…™·¥Ö...")
        return

    try:
        otp = await app.ask(
            chat.id,
            (
                "A…¥ OTP …™s s·¥á…¥·¥õ ·¥õ·¥è  è·¥è·¥ú Ä ·¥ò ú·¥è…¥·¥á …¥·¥ú·¥ç ô·¥á Ä, "
                "P ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä OTP …™…¥ `1 2 3 4 5` “ì·¥è Ä·¥ç·¥Ä·¥õ. __(s·¥ò·¥Ä·¥Ñ·¥á  ô·¥á·¥õ·¥°·¥á·¥á…¥ ·¥á·¥Ä·¥Ñ ú …¥·¥ú·¥ç ô·¥á Äs!)__"
            ),
            timeout=300,
        )

    except TimeoutError:
        await message.reply_text("T…™·¥ç·¥á  ü…™·¥ç…™·¥õ  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö ·¥è“ì 5 ·¥ç…™…¥. ·¥ò Ä·¥è·¥Ñ·¥áss ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö.")
        return
    otp_code = otp.text
    try:
        await temp_client.sign_in(
            phone, code.phone_code_hash, phone_code=" ".join(str(otp_code))
        )
    except PhoneCodeInvalid:
        await message.reply_text("I…¥·¥†·¥Ä ü…™·¥Ö OTP.")
        return
    except PhoneCodeExpired:
        await message.reply_text("OTP …™s ·¥áx·¥ò…™ Ä·¥á·¥Ö.")
        return
    except SessionPasswordNeeded:
        try:
            two_step_code = await app.ask(
                chat.id,
                "Y·¥è·¥ú Ä ·¥Ä·¥Ñ·¥Ñ·¥è·¥ú…¥·¥õ  ú·¥Ä·¥†·¥á ·¥õ·¥°·¥è-s·¥õ·¥á·¥ò ·¥†·¥á Ä…™“ì…™·¥Ñ·¥Ä·¥õ…™·¥è…¥.\nP ü·¥á·¥Äs·¥á ·¥á…¥·¥õ·¥á Ä  è·¥è·¥ú Ä ·¥ò·¥Äss·¥°·¥è Ä·¥Ö.",
                timeout=300,
            )
        except TimeoutError:
            await message.reply_text("T…™·¥ç·¥á  ü…™·¥ç…™·¥õ  Ä·¥á·¥Ä·¥Ñ ú·¥á·¥Ö ·¥è“ì 5 ·¥ç…™…¥.")
            return
        new_code = two_step_code.text
        try:
            await temp_client.check_password(new_code)
        except Exception as e:
            await message.reply_text(f"**E Ä Ä·¥è Ä :** `{str(e)}`")
            return
    except Exception as e:
        await app.send_message(chat.id, f"**E Ä Ä·¥è Ä :** `{str(e)}`")
        return
    try:
        session_string = await temp_client.export_session_string()
        await temp_client.disconnect()
        await app.send_message(
            chat.id, text=f"**H·¥á Ä·¥á Is Y·¥è·¥ú Ä S·¥õ Ä…™…¥…¢ S·¥áss…™·¥è…¥ :**\n```{session_string}```"
        )
    except Exception as e:
        await app.send_message(chat.id, f"**E Ä Ä·¥è Ä :** `{str(e)}`")
        return




from pyrogram import Client
from pyrogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton

from filters import command, other_filters, other_filters2


@Client.on_message(command("start") & other_filters2)
async def start(_, message: Message):
    await message.reply_text(
        f"""üôÉ H…™ {message.from_user.first_name}!
‚ú® H·¥á è, I'·¥Ä·¥ç P…™·¥ã·¥Ä·¥Ñ ú·¥úX·¥Ö S·¥õ Ä…™…¥…¢ G·¥á…¥·¥á Ä·¥Ä·¥õ·¥è Ä B·¥è·¥õ. 
ü•≥ I ·¥Ñ·¥Ä…¥ G·¥á…¥·¥á Ä·¥Ä·¥õ·¥è Ä S·¥õ Ä…™…¥…¢ S·¥áss…™·¥è…¥ “ì·¥è Ä Y·¥è·¥ú. üòâ
‚öúÔ∏è Us·¥á ·¥õ ú·¥ás·¥á  ô·¥ú·¥õ·¥õ·¥è…¥s  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥ç·¥è Ä·¥á. üëá
üî• B·¥è·¥õ M·¥Ä·¥Ö·¥á  ô è @iTs_Nitric. üî•
üëâ T è·¥ò·¥á /genstr “ì·¥è Ä G·¥á…¥·¥á Ä·¥Ä·¥õ·¥á S·¥õ Ä…™…¥…¢ S·¥áss…™·¥è…¥. üëà""",
        reply_markup=InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "üíö  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä", url="https://t.me/iTs_Nitric"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "üí¨ G Ä·¥è·¥ú·¥ò", url="https://t.me/PikachuXdSupport"
                    ),
                    InlineKeyboardButton(
                        "C ú·¥Ä…¥…¥·¥á ü üîà", url="https://t.me/PikachuXdUpdates"
                    )
                ],
                [
                    InlineKeyboardButton(
                        "‚ùå C ü·¥ès·¥á ‚ùå", callback_data="close"
                    )
                ]
            ]
        )
    )




